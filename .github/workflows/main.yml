name: CI

on: [ push, pull_request ]
env:
  BINUTILS_V: "2.41"
  BINUTILS_O: "--without-libiconv-prefix --without-libintl-prefix --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --enable-64-bit-bfd --enable-install-libiberty --enable-targets=x86_64-pep --with-system-zlib --with-gcc-major-version-only --enable-shared --enable-host-shared --with-sysroot=${{ github.workspace }}/gcc/cygwin"
  GCC_V:      "11.4.0"
  GCC_O:      "--without-libiconv-prefix --without-libintl-prefix --with-gcc-major-version-only --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-tune=generic --enable-languages=c,c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --enable-libquadmath --enable-libquadmath-support --disable-libssp --enable-libada --disable-symvers --disable-multilib --with-gnu-ld --with-gnu-as --with-cloog-include=/usr/include/cloog-isl --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible --enable-libstdcxx-filesystem-ts"
  CYGWIN_V:   "3.4.8"
  CYGWIN_O:   "--without-libiconv-prefix --without-libintl-prefix"
  COCOM_V:    "0.996"
  COCOM_O:    ""
  ICONV_V:    "1.17"
  ICONV_O:    "--enable-shared --disable-static --with-libiconv-prefix=no --with-libintl-prefix=no --enable-shared --enable-static --enable-extra-encodings am_cv_proto_iconv_arg1= 'am_cv_proto_iconv=extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);'"
  MING_V:     "11.0.1"
  MINGH_O:    "--enable-sdk=all --enable-w32api"
  MINGR_O:    "--enable-w32api --disable-lib32 --enable-lib64"
  TARGET:     "x86_64-pc-cygwin"
  
  
jobs:
  build:
    runs-on: ubuntu-latest
    container: ubuntu:18.04

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive TZ=US/Central \
          apt-get install -y build-essential autoconf automake patch perl \
          dblatex docbook2x docbook-xsl xmlto python3 python3-lxml python3-ply \
          dejagnu bison flex libtool libgmp-dev libmpfr-dev rpm2cpio \
          cpio libmpc-dev libcloog-isl-dev wget make zlib1g-dev libc6-dev \
          gettext zstd texlive-fonts-recommended texlive-latex-recommended \
          texlive-pictures gdc gfortran git libatomic1 debhelper \
          libgomp1 libquadmath0 libobjc-7-dev libgfortran-7-dev *mingw*

      - name: Check if command exists
        id: check_command
        run: |
          if ! command -v "wget" >/dev/null 2>&1; then
            echo "wget is not installed"
            echo "wget_installed=false" >> $GITHUB_OUTPUT
          else
            echo "wget is installed"
            echo "wget_installed=true" >> $GITHUB_OUTPUT
          fi
          if ! command -v "curl" >/dev/null 2>&1; then
            echo "curl is not installed"
            echo "curl_installed=false" >> $GITHUB_OUTPUT
          else
            echo "curl is installed"
            echo "curl_installed=true" >> $GITHUB_OUTPUT
          fi
          if ! command -v "aria2c" >/dev/null 2>&1; then
            echo "aria2ct is not installed"
            echo "aria2c_installed=false" >> $GITHUB_OUTPUT
          else
            echo "aria2c is installed"
            echo "aria2c_installed=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Download
        id: download
        if: steps.check_command.outputs.wget_installed == 'true' || steps.check_command.outputs.curl_installed == 'true' || steps.check_command.outputs.aria2c_installed == 'true'
        run: |
          if   command -v wget >/dev/null 2>&1; then
            wget -c -q "$URL{1,2,3,4,5}"
            echo "download_status=success" >> $GITHUB_OUTPUT
          elif command -v curl >/dev/null 2>&1; then
            curl -LO -q "$URL{1,2,3,4,5}"
            echo "download_status=success" >> $GITHUB_OUTPUT
          elif command -v aria2c >/dev/null 2>@1; then
            aria2c -c -s 16 -x 16 "$URL{1,2,3,4,5}"
            echo "download_status=success" >> $GITHUB_OUTPUT
          fi
        env:
          URL1: https://sourceware.org/pub/binutils/releases/binutils-${{ env.BINUTILS_V }}.tar.xz
          URL2: https://sourceware.org/pub/gcc/releases/gcc-$GCC_V/gcc-${{ env.GCC_V }}.tar.xz
          URL3: https://downloads.sourceforge.net/sourceforge/cocom/cocom-${{ env.COCOM_V }}.tar.gz
          URL4: https://ftp.gnu.org/pub/gnu/libiconv/libiconv-${{ env.ICONV_V }}.tar.gz
          URL5: http://deb.debian.org/debian/pool/main/m/mingw-w64/mingw-w64_${{ env.MING_V }}.orig.tar.bz2

      - name: Clone github repo's
        run: |
          git clone -q https://github.com/cygwin/cygwin cygwin-${{ env.CYGWIN_V }}
          cd cygwin-${{ env.CYGWIN_V }}
          git checkout -q cygwin-${{ env.CYGWIN_V }}
          cd ..
          git clone -q https://github.com/jmeubank/windows-default-manifest

      - name: Check if tarballs exist
        id: check-tarballs
        run: |
          if [ -f "$1.tar.xz" ] || [ -f "$1.tar.gz" ] || [ -f "$1.tar.bz2" ]; then
            echo "exists=true"
          else
            echo "exists=false"
          fi
        shell: bash

      - name: Unpack tarballs
        if: steps.check-tarballs.outputs.exists == 'true'
        run: |
          unpack () {
            if [ -f "$1.tar.xz" ]; then
              tar -xf "$1.tar.xz"
            elif [ -f "$1.tar.gz" ]; then
              tar -xf "$1.tar.gz"
            elif [ -f "$1.tar.bz2" ]; then
              tar -xf "$1.tar.bz2"
            fi
            }
          unpack  binutils-${{ env.BINUTILS_V }}.tar.xz
          unpack  gcc-${{ env.GCC_V }}.tar.xz
          unpack  cocom-${{ env.COCOM_V }}.tar.gz
          unpack  iconv-${{ env.ICONV_V }}.tar.gz
          unpack  mingw-${{ env.MING_V_V }}.tar.bz2
          rm -Rf *tar*

      - name: Patch files
        run: |
          # Patch binutils
          cd binutils-${{ env.BINUTILS_V }}
          cat ../binutils-2.41-cygwin-config-rpath.patch | patch -p2
          cat ../binutils-2.41-cygwin-pep-dll-double-definition.patch | patch -p2
          cat ../binutils-2.41-cygwin-restore-bfd-seek-optimization.patch | patch -p1
          # Patch shared libs
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="-Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin -lkernel32"#g' bfd/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' bfd/configure.ac
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure.ac
          # patch gcc
          cd ../gcc-${{ env.GCC_V }}
          cat ../0001-Cygwin-use-SysV-ABI-on-x86_64.patch | patch -p1
          cat ../0002-Cygwin-add-dummy-pthread-tsaware-and-large-address-a.patch | patch -p1
          cat ../0003-Cygwin-handle-dllimport-properly-in-medium-model-V2.patch | patch -p1
          cat ../0004-Cygwin-MinGW-skip-test.patch | patch -p1
          cat ../0005-Cygwin-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENA.patch | patch -p1
          cat ../0007-Cygwin-__cxa-atexit.patch | patch -p1
          cat ../0008-Cygwin-libgomp-soname.patch | patch -p1
          cat ../0009-Cygwin-g-time.patch | patch -p1
          cat ../0010-Cygwin-newlib-ftm.patch | patch -p1
          cat ../0011-Cygwin-define-STD_UNIX.patch | patch -p1
          cat ../0101-Cygwin-enable-libgccjit-not-just-for-MingW.patch | patch -p1
          cat ../0102-Cygwin-testsuite-fixes-for-libgccjit.patch | patch -p1
          cat ../0201-Cygwin-ada-shared-prefix.patch | patch -p2

      - name: download gcc dependencies
        run: |
          cd gcc-${{ env.GCC_V }}
          ./contrib/download_prerequisites

      - name: Check CPU cores
        id: cpu-cores
        run: |
          echo "CPU_CORES=$(nproc)" >> $GITHUB_ENV
        shell: bash
        
      - name: Build cocom
        run: |
          mkdir build-cocom
          cd build-cocom
          ../cocom-${{ env.COCOM_V }}/configure --prefix=/usr ${{ env.COCOM_O }}
          make -j2
          make install -j2

      - name: Build libiconv
        run: |
          mkdir build-icon
          cd build-icon
          ../libiconv-${{ env.ICONV_V }}/configure --prefix=/usr ${{ env.ICONV_O }}
          make -j2
          make install -j2

      - name: Build Binutils
        run: |
          export BUILD_CC=x86_64-linux-gnu-gcc
          mkdir build-binutils
          cd build-binutils
          ../binutils-${{ env.BINUTILS_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --host=x86_64-w64-mingw32 --target=${{ env.TARGET }} ${{ env.BINUTILS_O }}
          make -j2
          make install -j2

      - name: Build gcc
        run: |
          export BUILD_CC=x86_64-linux-gnu-gcc
          mkdir build-gcc
          cd build-gcc
          ../gcc-${{ env.GCC_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --host=x86_64-w64-mingw32 --target=${{ env.TARGET }} ${{ env.GCC_O }}
          MAKEOPTS=" -Otarget"
          export glibcxx_cv_realpath=yes
          ___CFLAGS="${CFLAGS} -Wformat-security -D_FORTIFY_SOURCE=[12]"
          ___CXXFLAGS="${CXXFLAGS} -Wformat-security -D_FORTIFY_SOURCE=[12]"
          CFLAGS="${___CFLAGS} -DWIN32_LEAN_AND_MEAN"
          CXXFLAGS=${___CXXFLAGS}
          make -j2 ${MAKEOPTS} BOOT_CFLAGS="${CXXFLAGS}"
          make install -j2

      - name: Build windows-default-manifest
        run: |
          export BUILD_CC=x86_64-linux-gnu-gcc
          mkdir build-headers
          cd build-headers
          ../mingw-w64-v${{ env.MING_V }}/mingw-w64-headers/configure --prefix=${{ github.workspace }}/gcc/cygwin  --host=${{ env.TARGET }} ${{ env.MINGH_O }}
          make -j2
          make install -j2
          cd ../
          mkdir build-runtime
          cd build-runtime
          ../mingw-w64-v${{ env.MING_V }}/mingw-w64-crt/configure --prefix=${{ github.workspace }}/gcc/cygwin --host=${{ env.TARGET }} ${{ env.MINGR_O }}
          make -j2
          make install -j2
          mkdir build-manifest
          cd build=manifest
          ../windows-default-manifest.configure --prefix=${{ github.workspace }}/gcc/cygwin --host=${{ env.TARGET }}
          make -j2
          make install -j2
          
      - name: Build cygwin
        run: |
          export BUILD_CC=x86_64-linux-gnu-gcc
          cd cygwin-${{ env.CYGWIN_V }}/winsup
          ./autogen.sh
          cd ../..
          mkdir build-cygwin
          cd build-cygwin
          ../cygwin-${{ env.CYGWIN_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --host=${{ env.TARGET }} --target=${{ env.TARGET }} ${{ env.CYGWIN_O }} \
          CFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector" \
          CXXFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector -DCYGPORT_RELEASE_INFO='3.4.8-1'"
          make -j2
          make install -j2

