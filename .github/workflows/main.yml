name: CI

on: [ push, pull_request ]

jobs:
  linux-build:
    runs-on: ubuntu-latest
    env:
      BINUTILS_V: "2.41"
      BINUTILS_O: "--without-libiconv-prefix --without-libintl-prefix --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --enable-64-bit-bfd --enable-install-libiberty --enable-targets=x86_64-pep --with-system-zlib --with-gcc-major-version-only --enable-shared --enable-host-shared --with-sysroot=${{ github.workspace }}/gcc/cygwin"
      GCC_V:      "11.4.0"
      GCC_O:      "--without-libiconv-prefix --without-libintl-prefix --with-gcc-major-version-only --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-tune=generic --enable-languages=c,c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --enable-libquadmath --enable-libquadmath-support --disable-libssp --enable-libada --disable-symvers --disable-multilib --with-gnu-ld --with-gnu-as --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible --enable-libstdcxx-filesystem-ts"
      CYGWIN_V:   "3.4.8"
      CYGWIN_O:   "--without-libiconv-prefix --without-libintl-prefix"
    container: fedora:latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - target: x86_64-pc-cygwin
          pkgarch: 64
        - target: i386-pc-cygwin
          pkgarch: 32
    name: Fedora cross ${{ matrix.target }}

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          # install build tools
          dnf install -y autoconf automake make patch perl
          dnf install -y mingw${{ matrix.pkgarch }}-gcc-c++ mingw${{ matrix.pkgarch }}-winpthreads-static mingw${{ matrix.pkgarch }}-zlib-static
          # install binutils depenencies
          dnf install -y dejagnu gmp-devel glibc-devel gettext-devel isl-devel libmpc-devel mpfr-devel zlib-devel zstd
          # enable 'dnf copr'
          dnf install -y dnf-plugins-core
          # cocom isn't packaged in Fedora, so we install from a copr
          dnf copr enable -y jturney/cocom
          dnf install -y cocom
          # install cross-cygwin toolchain and libs from copr
          dnf copr enable -y yselkowitz/cygwin
          dnf install -y cygwin${{ matrix.pkgarch }}-gcc-c++ cygwin${{ matrix.pkgarch }}-gettext cygwin${{ matrix.pkgarch }}-libbfd cygwin${{ matrix.pkgarch }}-libiconv cygwin${{ matrix.pkgarch }}-zlib
          # install gcc dependencies
          dnf install -y mingw${{ matrix.pkgarch }}-ctr mingw${{ matrix.pkgarch }}-headers
          # install doc tools
          dnf install -y dblatex docbook2X docbook-xsl xmlto
          dnf install -y python3 python3-lxml python3-ply
          fmtutil-sys --byfmt pdflatex && texhash
          # install wget, git and bzip2
          dnf install -y wget git bzip2

      - name: Download, extract and patch Source
        run: |
          wget -q -O binutils.tar.xz https://sourceware.org/pub/binutils/releases/binutils-${{ env.BINUTILS_V }}.tar.xz
          wget -q -O gcc.tar.xz https://sourceware.org/pub/gcc/releases/gcc-${{ env.GCC_V }}/gcc-${{ env.GCC_V }}.tar.xz
          git clone -q https://github.com/cygwin/cygwin cygwin-${{ env.CYGWIN_V }}
          cd cygwin-${{ env.CYGWIN_V }}
          git checkout -q cygwin-${{ env.CYGWIN_V }}
          cd ..
          tar -xf binutils.tar.xz
          tar -xf gcc.tar.xz
          # Patch binutils
          cd binutils-${{ env.BINUTILS_V }}
          cat ../patches/binutils/binutils-2.41-cygwin-config-rpath.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-pep-dll-double-definition.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-restore-bfd-seek-optimization.patch | patch -p1
          # Patch shared libs
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="-Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin -lkernel32"#g' bfd/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' bfd/configure.ac
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure.ac
          # patch gcc
          cd ../gcc-${{ env.GCC_V }}
          cat ../patches/gcc/0001-Cygwin-use-SysV-ABI-on-x86_64.patch | patch -p1
          cat ../patches/gcc/0002-Cygwin-add-dummy-pthread-tsaware-and-large-address-a.patch | patch -p1
          cat ../patches/gcc/0003-Cygwin-handle-dllimport-properly-in-medium-model-V2.patch | patch -p1
          cat ../patches/gcc/0004-Cygwin-MinGW-skip-test.patch | patch -p1
          cat ../patches/gcc/0005-Cygwin-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENA.patch | patch -p1
          cat ../patches/gcc/0007-Cygwin-__cxa-atexit.patch | patch -p1
          cat ../patches/gcc/0008-Cygwin-libgomp-soname.patch | patch -p1
          cat ../patches/gcc/0009-Cygwin-g-time.patch | patch -p1
          cat ../patches/gcc/0010-Cygwin-newlib-ftm.patch | patch -p1
          cat ../patches/gcc/0011-Cygwin-define-STD_UNIX.patch | patch -p1
          cat ../patches/gcc/0101-Cygwin-enable-libgccjit-not-just-for-MingW.patch | patch -p1
          cat ../patches/gcc/0102-Cygwin-testsuite-fixes-for-libgccjit.patch | patch -p1
          cat ../patches/gcc/0201-Cygwin-ada-shared-prefix.patch | patch -p2
          ./contrib/download_prerequisites

      - name: Build Binutils
        continue-on-error: true
        run: |
          export PATH="$PATH:${{ github.workspace }}/gcc/cygwin/bin"
          mkdir build-binutils
          cd build-binutils
          ../binutils-${{ env.BINUTILS_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --target=${{ matrix.target }} ${{ env.BINUTILS_O }}
          make -j2
          make install -j2

      - name: Build gcc
        continue-on-error: true
        run: |
          mkdir build-gcc
          cd build-gcc
          ../gcc-${{ env.GCC_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --target=${{ matrix.target }} ${{ env.GCC_O1 }}
          export glibcxx_cv_realpath=yes
          ___CFLAGS=`echo ${CFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CFLAGS=`echo ${___CFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CFLAGS=`echo ${___CFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          ___CXXFLAGS=`echo ${CXXFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          CFLAGS="${___CFLAGS} -DWIN32_LEAN_AND_MEAN"
          CXXFLAGS="${___CXXFLAGS}"
          make -j2 ${MAKEOPTS} BOOT_CFLAGS="${CXXFLAGS}"
          make install -j2

      - name: Build cygwin
        continue-on-error: true
        run: |
          cd cygwin-${{ env.CYGWIN_V }}/winsup
          ./autogen.sh
          cd ../..
          mkdir build-cygwin
          cd build-cygwin
          ../cygwin-${{ env.CYGWIN_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --target=${{ matrix.target }} ${{ env.CYGWIN_O }} \
          CFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector" \
          CXXFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector -DCYGPORT_RELEASE_INFO='3.4.8-1'"
          make -j2
          make install -j2

      - name: Archive Install
        run: tar -zcvf cygwin-linux.tar.xz ${{ github.workspace }}/gcc/cygwin
        shell: bash
      
  windows-build:
    runs-on: windows-latest
    env:
      BINUTILS_V: "2.41"
      BINUTILS_O: "--without-libiconv-prefix --without-libintl-prefix --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --enable-64-bit-bfd --enable-install-libiberty --enable-targets=x86_64-pep --with-system-zlib --with-gcc-major-version-only --enable-shared --enable-host-shared --with-sysroot=${{ github.workspace }}/gcc/cygwin"
      GCC_V:      "11.4.0"
      GCC_O:      "--without-libiconv-prefix --without-libintl-prefix --with-gcc-major-version-only --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-tune=generic --enable-languages=c,c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --enable-libquadmath --enable-libquadmath-support --disable-libssp --enable-libada --disable-symvers --disable-multilib --with-gnu-ld --with-gnu-as --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible --enable-libstdcxx-filesystem-ts"
      CYGWIN_V:   "3.4.8"
      CYGWIN_O:   "--without-libiconv-prefix --without-libintl-prefix"
    strategy:
      fail-fast: false
      matrix:
        include:
        - target: x86_64-pc-cygwin
          pkgarch: x86_64
        - target: i386-pc-cygwin
          pkgarch: i386
    name: Windows native ${{ matrix.pkgarch }}

    steps:
      # checkout action uses the native git (we can avoid this messing up line
      # endings, but this could still be dangerous e.g if we need symlinks in the
      # repo)
      - run: git config --global core.autocrlf input
      - uses: actions/checkout@v3

      # install cygwin and build tools
      - name: Install Cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          platform: x86_64
          packages: >-
            autoconf,
            automake,
            bash,
            binutils,
            busybox,
            cocom,
            cygutils-extra,
            cygwin,
            cygwin-devel,
            dblatex,
            dejagnu,
            docbook-xml45,
            docbook-xsl,
            docbook2X,
            gcc-g++,
            gettext-devel,
            git,
            libatomic1,
            libgcc1,
            libgmp-devel,
            libgmp10,
            libgomp1,
            libiconv,
            libiconv-devel,
            libiconv2,
            libintl-devel,
            libintl8,
            libisl-devel,
            libisl23,
            libmpc-devel,
            libmpc3,
            libmpfr-devel,
            libmpfr6,
            libquadmath0,
            libzstd-devel,
            libzstd1,
            make,
            mingw64-${{ matrix.pkgarch }}-gcc-g++,
            mingw64-${{ matrix.pkgarch }}-zlib,
            patch,
            perl,
            python39-lxml,
            python39-ply,
            texlive-collection-fontsrecommended,
            texlive-collection-latexrecommended,
            texlive-collection-pictures,
            w32api-headers,
            w32api-runtime,
            wget,
            windows-default-manifest,
            xmlto,
            xz,
            zlib-devel,
            zlib0

      - name: Download, extract and patch Source
        run: |
          wget -q -O binutils.tar.gz https://sourceware.org/pub/binutils/releases/binutils-${{ env.BINUTILS_V }}.tar.gz
          wget -q -O gcc.tar.gz https://sourceware.org/pub/gcc/releases/gcc-${{ env.GCC_V }}/gcc-${{ env.GCC_V }}.tar.gz
          git clone -q https://github.com/cygwin/cygwin cygwin-${{ env.CYGWIN_V }}
          cd cygwin-${{ env.CYGWIN_V }}
          git checkout -q cygwin-${{ env.CYGWIN_V }}
          cd ..
          tar -xf binutils.tar.gz
          tar -xf gcc.tar.gz
          # Patch binutils
          pushd binutils-${{ env.BINUTILS_V }}
          cat ../patches/binutils/binutils-2.41-cygwin-config-rpath.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-pep-dll-double-definition.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-restore-bfd-seek-optimization.patch | patch -p1
          # Patch shared libs
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="-Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin -lkernel32"#g' bfd/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' bfd/configure.ac
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure.ac
          popd
          # patch gcc
          pushd gcc-${{ env.GCC_V }}
          cat ../patches/gcc/0001-Cygwin-use-SysV-ABI-on-x86_64.patch | patch -p1
          cat ../patches/gcc/0002-Cygwin-add-dummy-pthread-tsaware-and-large-address-a.patch | patch -p1
          cat ../patches/gcc/0003-Cygwin-handle-dllimport-properly-in-medium-model-V2.patch | patch -p1
          cat ../patches/gcc/0004-Cygwin-MinGW-skip-test.patch | patch -p1
          cat ../patches/gcc/0005-Cygwin-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENA.patch | patch -p1
          cat ../patches/gcc/0007-Cygwin-__cxa-atexit.patch | patch -p1
          cat ../patches/gcc/0008-Cygwin-libgomp-soname.patch | patch -p1
          cat ../patches/gcc/0009-Cygwin-g-time.patch | patch -p1
          cat ../patches/gcc/0010-Cygwin-newlib-ftm.patch | patch -p1
          cat ../patches/gcc/0011-Cygwin-define-STD_UNIX.patch | patch -p1
          cat ../patches/gcc/0101-Cygwin-enable-libgccjit-not-just-for-MingW.patch | patch -p1
          cat ../patches/gcc/0102-Cygwin-testsuite-fixes-for-libgccjit.patch | patch -p1
          cat ../patches/gcc/0201-Cygwin-ada-shared-prefix.patch | patch -p2
          ./contrib/download_prerequisites
          popd

      - name: Build Binutils
        continue-on-error: true
        run: >-
          export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
          mkdir build-binutils &&
          cd build-binutils &&
          ../binutils-${{ env.BINUTILS_V }}/configure --prefix="${{ github.workspace }}/gcc/cygwin" --target=${{ matrix.target }} ${{ env.BINUTILS_O }} &&
          make &&
          make install
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'

      - name: Build gcc
        continue-on-error: true
        run: >-
          export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
          mkdir build-gcc &&
          cd build-gcc &&
          ../gcc-${{ env.GCC_V }}/configure --prefix="${{ github.workspace }}/gcc/cygwin" --target=${{ matrix.target }} ${{ env.GCC_O }} &&
          export glibcxx_cv_realpath=yes &&
          ___CFLAGS=`echo ${CFLAGS} | sed s/-Werror=format-security/-Wformat-security/g` &&
          ___CFLAGS=`echo ${___CFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g` &&
          ___CFLAGS=`echo ${___CFLAGS} | sed 's/[[:blank:]]\+/ /g'` &&
          ___CXXFLAGS=`echo ${CXXFLAGS} | sed s/-Werror=format-security/-Wformat-security/g` &&
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g` &&
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed 's/[[:blank:]]\+/ /g'` &&
          CFLAGS="${___CFLAGS} -DWIN32_LEAN_AND_MEAN" &&
          CXXFLAGS="${___CXXFLAGS}" &&
          make ${MAKEOPTS} BOOT_CFLAGS="${CXXFLAGS}" &&
          make install
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'
          
      - name: Build cygwin
        continue-on-error: true
        run: >-
         export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 
          (cd cygwin-${{ env.CYGWIN_V }}/winsup; ./autogen.sh) &&
          cd ../..
          mkdir build-cygwin
          cd build-cygwin
          ../cygwin-${{ env.CYGWIN_V }}/configure --prefix="${{ github.workspace }}/gcc/cygwin" --target=${{ matrix.target }} ${{ env.CYGWIN_O }} CFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector" CXXFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector -DCYGPORT_RELEASE_INFO='3.4.8-1'" &&
          make &&
          make install &&
          (cd */newlib; make info man) &&
          (cd */newlib; make install-info install-man)
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'

      - name: Archive Install
        run: tar -zcvf cygwin-windows.tar.gz ${{ github.workspace }}/gcc/cygwin
        shell: powershell

  archive-builds:
    runs-on: ubuntu-latest
    needs: 
      - windows-build
      - linux-build

    steps:
      - name:  Archive
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: repo-archive
          path: cygwin-linux.tar.xz cygwin-windows.tar.gz
