name: CI

on: [ push, pull_request ]

jobs:
  linux-build:
    runs-on: ubuntu-latest
    env:
      BINUTILS_V: "2.41"
      BINUTILS_O: "--without-libiconv-prefix --without-libintl-prefix --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --enable-64-bit-bfd --enable-install-libiberty --enable-targets=x86_64-pep --with-system-zlib --with-gcc-major-version-only --enable-shared --enable-host-shared --with-sysroot=${{ github.workspace }}/gcc/cygwin"
      GCC_V:      "11.4.0"
      GCC_O1:      "--without-libiconv-prefix --without-libintl-prefix --with-gcc-major-version-only --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-tune=generic --enable-languages=c,c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --enable-libquadmath --enable-libquadmath-support --disable-libssp --enable-libada --disable-symvers --disable-multilib --with-gnu-ld --with-gnu-as --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible --enable-libstdcxx-filesystem-ts --with-sysroot=${{ github.workspace }}/gcc/cygwin --with-newlib --without-headers"
      GCC_O2:      "--without-libiconv-prefix --without-libintl-prefix --with-gcc-major-version-only --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-tune=generic --enable-languages=c,c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --enable-libquadmath --enable-libquadmath-support --disable-libssp --enable-libada --disable-symvers --disable-multilib --with-gnu-ld --with-gnu-as --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible --enable-libstdcxx-filesystem-ts --with-build-sysroot=${{ github.workspace }}/gcc/cygwin"
      CYGWIN_V:   "3.4.8"
      CYGWIN_O:   "--without-libiconv-prefix --without-libintl-prefix --with-build-sysroot=${{ github.workspace }}/gcc/cygwin"
      COCOM_V:    "0.996"
      COCOM_O:    ""
      ICONV_V:    "1.17"
      ICONV_O:    "--enable-shared --disable-static --with-libiconv-prefix=no --with-libintl-prefix=no --enable-shared --enable-static --enable-extra-encodings am_cv_proto_iconv_arg1= 'am_cv_proto_iconv=extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);'"
      MING_V:     "11.0.1"
      MINGH_O:    "--enable-sdk=all --enable-w32api"
      MINGR_O:    "--enable-w32api --disable-lib32 --enable-lib64"
      TARGET:     "x86_64-pc-cygwin"
    container: amd64/ubuntu:mantic

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sed -i 's/# deb-src/deb-src/g' /etc/apt/sources.list
          apt-get update
          apt-get full-upgrade -y
          apt-get install -y build-essential autoconf automake patch perl \
          dblatex docbook2x docbook-xsl xmlto python3 python3-lxml python3-ply \
          dejagnu bison flex libtool libgmp-dev libmpfr-dev \
          libmpc-dev software-properties-common wget make zlib1g-dev libc6-dev \
          gettext zstd texlive-fonts-recommended texlive-latex-recommended \
          texlive-pictures gdc gfortran git libatomic1 debhelper autotools-dev \
          libgomp1 libquadmath0 libobjc-13-dev libgfortran-13-dev gperf libwine-dev \
          autoconf automake autopoint binutils binutils-common \
          binutils-mingw-w64-i686 binutils-mingw-w64-x86-64 binutils-x86-64-linux-gnu \
          bsdextrautils build-essential bzip2 cpp cpp-13 debhelper debugedit \
          dh-autoreconf dh-strip-nondeterminism dpkg-dev dwz file g++-13 \
          gcc-13 gcc-mingw-w64-base gcc-mingw-w64-x86-64 libz-mingw-w64-dev \
          gcc-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix-runtime \
          gcc-mingw-w64-x86-64-win32 gcc-mingw-w64-x86-64-win32-runtime win-iconv-mingw-w64-dev \
          gettext-base groff-base intltool-debian libarchive-zip-perl libasan8 \
          libatomic1 libbinutils libc-dev-bin libc6-dev libcc1-0 libcrypt-dev \
          libctf-nobfd0 libctf0 libdebhelper-perl libdpkg-perl libdw1 libelf1 \
          libfile-stripnondeterminism-perl libgcc-13-dev libgdbm-compat4 libgdbm6 \
          libgomp1 libgprofng0 libgssapi-krb5-2 libhwasan0 libisl23 libitm1 \
          libjansson4 libk5crypto3 libkeyutils1 libkrb5-3 libkrb5support0 liblsan0 \
          libmagic-mgc libmagic1 libmpc3 libmpfr6 libnsl-dev libnsl2 libperl5.36 \
          libpipeline1 libquadmath0 libsframe1 libssl3 libstdc++-13-dev \
          libsub-override-perl libtirpc-common libtirpc-dev libtirpc3 libtool libtsan2 \
          libubsan1 libuchardet0 libxml2 linux-libc-dev lto-disabled-list m4 make \
          man-db mingw-w64-common mingw-w64-i686-dev mingw-w64-x86-64-dev patch perl \
          perl-modules-5.36 po-debconf rpcsvc-proto xz-utils libnewlib-dev gnat-12
          apt-get build-dep -y gcc-13

      - name: Download, extract and patch Source
        run: |
          wget -q -O binutils.tar.xz https://sourceware.org/pub/binutils/releases/binutils-${{ env.BINUTILS_V }}.tar.xz
          wget -q -O gcc.tar.xz https://sourceware.org/pub/gcc/releases/gcc-${{ env.GCC_V }}/gcc-${{ env.GCC_V }}.tar.xz
          git clone -q https://github.com/cygwin/cygwin cygwin-${{ env.CYGWIN_V }}
          cd cygwin-${{ env.CYGWIN_V }}
          git checkout -q cygwin-${{ env.CYGWIN_V }}
          cd ..
          git clone -q https://cygwin.com/git/cygwin-apps/windows-default-manifest.git
          wget -q -O cocom.tar.gz https://downloads.sourceforge.net/sourceforge/cocom/cocom-${{ env.COCOM_V }}.tar.gz
          wget -q -O iconv.tar.gz https://ftp.gnu.org/pub/gnu/libiconv/libiconv-${{ env.ICONV_V }}.tar.gz
          wget -q -O mingw.tar.gz https://ftp.fau.de/macports/distfiles/mingw-w64/mingw-w64-${{ env.MING_V }}.tar.gz
          tar -xf binutils.tar.xz
          tar -xf gcc.tar.xz
          tar -xf cocom.tar.gz
          tar -xf iconv.tar.gz
          tar -xf mingw.tar.gz
          mv mingw-w64-mingw-w64-e4dcfb3 mingw-w64-${{ env.MING_V }}
          # Patch binutils
          cd binutils-${{ env.BINUTILS_V }}
          cat ../patches/binutils/binutils-2.41-cygwin-config-rpath.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-pep-dll-double-definition.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-restore-bfd-seek-optimization.patch | patch -p1
          # Patch shared libs
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="-Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin -lkernel32"#g' bfd/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' bfd/configure.ac
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure.ac
          # patch gcc
          cd ../gcc-${{ env.GCC_V }}
          cat ../patches/gcc/0001-Cygwin-use-SysV-ABI-on-x86_64.patch | patch -p1
          cat ../patches/gcc/0002-Cygwin-add-dummy-pthread-tsaware-and-large-address-a.patch | patch -p1
          cat ../patches/gcc/0003-Cygwin-handle-dllimport-properly-in-medium-model-V2.patch | patch -p1
          cat ../patches/gcc/0004-Cygwin-MinGW-skip-test.patch | patch -p1
          cat ../patches/gcc/0005-Cygwin-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENA.patch | patch -p1
          cat ../patches/gcc/0007-Cygwin-__cxa-atexit.patch | patch -p1
          cat ../patches/gcc/0008-Cygwin-libgomp-soname.patch | patch -p1
          cat ../patches/gcc/0009-Cygwin-g-time.patch | patch -p1
          cat ../patches/gcc/0010-Cygwin-newlib-ftm.patch | patch -p1
          cat ../patches/gcc/0011-Cygwin-define-STD_UNIX.patch | patch -p1
          cat ../patches/gcc/0101-Cygwin-enable-libgccjit-not-just-for-MingW.patch | patch -p1
          cat ../patches/gcc/0102-Cygwin-testsuite-fixes-for-libgccjit.patch | patch -p1
          cat ../patches/gcc/0201-Cygwin-ada-shared-prefix.patch | patch -p2
          ./contrib/download_prerequisites
          cd ../mingw-w64-${{ env.MING_V }}
          cat ../patches/mingw/buildflags.patch | patch -Np1
          cat ../patches/mingw/spelling-fixes.patch | patch -Np1
          cat ../patches/mingw/widl-no-context.patch | patch -Np1
          cat ../patches/mingw/disable-werror.patch | patch -Np1
          cat ../patches/mingw/missing-cpu-info.patch | patch -Np1
          cat ../patches/mingw/basetsd-hppa.patch | patch -Np1
          cat ../patches/mingw/dlltool-temp-prefix.patch | patch -Np1
          cat ../patches/mingw/reproducible-build.patch | patch -Np1
          cat ../patches/mingw/widl-pathtools-bsd.patch | patch -Np1
          cat ../patches/mingw/genpeimg-file.patch | patch -Np1
          cat ../patches/mingw/widl-cpu.patch | patch -Np1
          cat ../patches/mingw/basetsd-debian.patch | patch -Np1
          autoreconf
          cd ../libiconv-${{ env.ICONV_V }}
          cat ../patches/iconv/1.17-wchar.patch | patch -p2
          cat ../patches/iconv/1.16-cross-install.patch | patch -p1
          cat ../patches/iconv/1.16-aliases.patch | patch -p1
          cat ../patches/iconv/libiconv-1.16-msysize.patch | patch -Nbp1
          abi=2
          libcharset_abi=1
          make -j1 -f Makefile.devel lib/aliases.h
          cp -f srcm4/* m4
          autoreconf

      - name: Build cocom
        continue-on-error: true
        run: |
          mkdir build-cocom
          cd build-cocom
          ../cocom-${{ env.COCOM_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin ${{ env.COCOM_O }}
          make -j2
          make install -j2

      - name: Build libiconv
        continue-on-error: true
        run: |
          mkdir build-icon
          cd build-icon
          ../libiconv-${{ env.ICONV_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin ${{ env.ICONV_O }}
          make -j2
          make install -j2

      - name: Build headers
        continue-on-error: true
        run: |
          export PATH="$PATH:${{ github.workspace }}/gcc/cygwin/bin"
          mkdir build-headers
          cd build-headers
          ../mingw-w64-${{ env.MING_V }}/mingw-w64-headers/configure --prefix=${{ github.workspace }}/gcc/cygwin --build=x86-64-linux-gnu --host=x86_64-w64-mingw32 ${{ env.MINGH_O }} CPPFLAGS=" -I${{ github.workspace }}/gcc/cygwin/include"
          make -j2
          make install -j2
  
      - name: Build Binutils
        continue-on-error: true
        run: |
          export PATH="$PATH:${{ github.workspace }}/gcc/cygwin/bin"
          mkdir build-binutils
          cd build-binutils
          ../binutils-${{ env.BINUTILS_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --target=${{ env.TARGET }} ${{ env.BINUTILS_O }}
          make -j2
          make install -j2

      - name: Build gcc stage 1
        continue-on-error: true
        run: |
          mkdir build-gcc
          cd build-gcc
          ../gcc-${{ env.GCC_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --target=${{ env.TARGET }} ${{ env.GCC_O1 }}
          export glibcxx_cv_realpath=yes
          ___CFLAGS=`echo ${CFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CFLAGS=`echo ${___CFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CFLAGS=`echo ${___CFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          ___CXXFLAGS=`echo ${CXXFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          CFLAGS="${___CFLAGS} -DWIN32_LEAN_AND_MEAN"
          CXXFLAGS="${___CXXFLAGS}"
          make -j2 ${MAKEOPTS} BOOT_CFLAGS="${CXXFLAGS}"
          make install -j2

      #- name: install cygwin headers
      #  continue-on-error: true
      #  run: |
      #    wget -q -O cygwin-devel.tar.xz https://cygwin.mirror.globo.tech/x86_64/release/cygwin/cygwin-devel/cygwin-devel-3.4.8-1.tar.xz
      #    tar -xf cygwin-devel.tar.xz
      #    mkdir -p ${{ github.workspace }}/gcc/cygwin/
      #    cp -rv usr/include ${{ github.workspace }}/gcc/cygwin/
      #    cp -rv usr/lib/ ${{ github.workspace }}/gcc/cygwin
      #    rm -Rf usr
          
      - name: Build cygwin
        continue-on-error: true
        run: |
          cd cygwin-${{ env.CYGWIN_V }}/winsup
          ./autogen.sh
          cd ../..
          mkdir build-cygwin
          cd build-cygwin
          ../cygwin-${{ env.CYGWIN_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --build=x86-64-linux-gnu --host=${{ env.TARGET }} --target=${{ env.TARGET }} ${{ env.CYGWIN_O }} \
          CFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector" \
          CXXFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector -DCYGPORT_RELEASE_INFO='3.4.8-1'" --with-build-sysroot=${{ github.workspace }}/gcc/cygwin
          make -j2
          make install -j2

      - name: Build gcc stage2
        continue-on-error: true
        run: |
          mkdir build-gcc-2
          cd build-gcc-2
          ../gcc-${{ env.GCC_V }}/configure --prefix=${{ github.workspace }}/gcc/cygwin --target=${{ env.TARGET }} LDFLAGS_FOR_TARGET=${{ github.workspace }}/gcc/cygwin/lib/${{ env.TARGET }}/libgcc ${{ env.GCC_O2 }}
          export glibcxx_cv_realpath=yes
          ___CFLAGS=`echo ${CFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CFLAGS=`echo ${___CFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CFLAGS=`echo ${___CFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          ___CXXFLAGS=`echo ${CXXFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          CFLAGS="${___CFLAGS} -DWIN32_LEAN_AND_MEAN"
          CXXFLAGS="${___CXXFLAGS}"
          make -j2 ${MAKEOPTS} BOOT_CFLAGS="${CXXFLAGS}"
          make install -j2

      - name: Build headers
        continue-on-error: true
        run: |
          export PATH="$PATH:${{ github.workspace }}/gcc/cygwin/bin"
          mkdir build-headers
          cd build-headers
          ../mingw-w64-${{ env.MING_V }}/mingw-w64-headers/configure --prefix=${{ github.workspace }}/gcc/cygwin --build=x86-64-linux-gnu --host=${{ env.TARGET }} ${{ env.MINGH_O }} CPPFLAGS=" -I${{ github.workspace }}/gcc/cygwin/include"
          make -j2
          make install -j2

      - name: Build runtime
        continue-on-error: true
        run: |
          export PATH="$PATH:${{ github.workspace }}/gcc/cygwin/bin"
          mkdir build-runtime
          cd build-runtime
          ../mingw-w64-${{ env.MING_V }}/mingw-w64-crt/configure --prefix=${{ github.workspace }}/gcc/cygwin --build=x86-64-linux-gnu --host=${{ env.TARGET }}${{ env.MINGR_O }} CPPFLAGS=" -I${{ github.workspace }}/gcc/cygwin/include"
          make -j2
          make install -j2

      - name: Build windows default manifest
        continue-on-error: true
        run: |
          export PATH="$PATH:${{ github.workspace }}/gcc/cygwin/bin"
          mkdir build-manifest
          cd build-manifest
          ../windows-default-manifest/configure --prefix=${{ github.workspace }}/gcc/cygwin --build=x86-64-linux-gnu --host=${{ env.TARGET }} CPPFLAGS=" -I${{ github.workspace }}/gcc/cygwin/include"
          make -j2
          make install -j2

      - name: Archive Install
        run: tar -zcvf cygwin-linux.tar.xz ${{ github.workspace }}/gcc/cygwin
        shell: bash
      
  windows-build:
    runs-on: windows-latest
    env:
      BINUTILS_V: "2.41"
      BINUTILS_O: "--without-libiconv-prefix --without-libintl-prefix --disable-gdb --disable-libdecnumber --disable-readline --disable-sim --enable-64-bit-bfd --enable-install-libiberty --enable-targets=x86_64-pep --with-system-zlib --with-gcc-major-version-only --enable-shared --enable-host-shared --with-sysroot=${{ github.workspace }}/gcc/cygwin"
      GCC_V:      "11.4.0"
      GCC_O:      "--without-libiconv-prefix --without-libintl-prefix --with-gcc-major-version-only --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-tune=generic --enable-languages=c,c++ --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --enable-libquadmath --enable-libquadmath-support --disable-libssp --enable-libada --disable-symvers --disable-multilib --with-gnu-ld --with-gnu-as --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible --enable-libstdcxx-filesystem-ts"
      CYGWIN_V:   "3.4.8"
      CYGWIN_O:   "--without-libiconv-prefix --without-libintl-prefix"
    strategy:
      fail-fast: false
      matrix:
        include:
        - target: x86_64-pc-cygwin
          pkgarch: x86_64
        - target: i386-pc-cygwin
          pkgarch: i386
    name: Windows native ${{ matrix.pkgarch }}

    steps:
      # checkout action uses the native git (we can avoid this messing up line
      # endings, but this could still be dangerous e.g if we need symlinks in the
      # repo)
      - run: git config --global core.autocrlf input
      - uses: actions/checkout@v3

      # install cygwin and build tools
      - name: Install Cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          platform: x86_64
          packages: >-
            autoconf,
            automake,
            bash,
            binutils,
            busybox,
            cocom,
            cygutils-extra,
            cygwin,
            cygwin-devel,
            dblatex,
            dejagnu,
            docbook-xml45,
            docbook-xsl,
            docbook2X,
            gcc-g++,
            gettext-devel,
            libatomic1,
            libgcc1,
            libgmp-devel,
            libgmp10,
            libgomp1,
            libiconv,
            libiconv-devel,
            libiconv2,
            libintl-devel,
            libintl8,
            libisl-devel,
            libisl23,
            libmpc-devel,
            libmpc3,
            libmpfr-devel,
            libmpfr6,
            libquadmath0,
            libzstd-devel,
            libzstd1,
            make,
            mingw64-${{ matrix.pkgarch }}-gcc-g++,
            mingw64-${{ matrix.pkgarch }}-zlib,
            patch,
            perl,
            python39-lxml,
            python39-ply,
            texlive-collection-fontsrecommended,
            texlive-collection-latexrecommended,
            texlive-collection-pictures,
            w32api-headers,
            w32api-runtime,
            windows-default-manifest,
            xmlto,
            xz,
            zlib-devel,
            zlib0

      - name: Download, extract and patch Source
        run: |
          wget -q -O binutils.tar.gz https://sourceware.org/pub/binutils/releases/binutils-${{ env.BINUTILS_V }}.tar.gz
          wget -q -O gcc.tar.gz https://sourceware.org/pub/gcc/releases/gcc-${{ env.GCC_V }}/gcc-${{ env.GCC_V }}.tar.gz
          git clone -q https://github.com/cygwin/cygwin cygwin-${{ env.CYGWIN_V }}
          cd cygwin-${{ env.CYGWIN_V }}
          git checkout -q cygwin-${{ env.CYGWIN_V }}
          cd ..
          tar -xf binutils.tar.gz
          tar -xf gcc.tar.gz
          # Patch binutils
          pushd binutils-${{ env.BINUTILS_V }}
          cat ../patches/binutils/binutils-2.41-cygwin-config-rpath.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-pep-dll-double-definition.patch | patch -p2
          cat ../patches/binutils/binutils-2.41-cygwin-restore-bfd-seek-optimization.patch | patch -p1
          # Patch shared libs
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="-Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin -lkernel32"#g' bfd/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' bfd/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../libiberty -liberty $SHARED_LIBADD -lcygwin -lkernel32"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' bfd/configure.ac
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure
          sed -i 's#SHARED_LDFLAGS="-no-undefined"#SHARED_LDFLAGS="-no-undefined -Wl,--exclude-libs=libiberty.a"#g' opcodes/configure.ac
          sed -i 's#SHARED_LIBADD="-L`pwd`/../bfd -lbfd -L`pwd`/../libiberty -liberty $SHARED_LIBADD"#SHARED_LIBADD="`pwd`/../bfd/libbfd.la -Wl,`pwd`/../libiberty/libiberty.a -L`pwd`/../intl -lintl -lcygwin"#g' opcodes/configure.ac
          popd
          # patch gcc
          pushd gcc-${{ env.GCC_V }}
          cat ../patches/gcc/0001-Cygwin-use-SysV-ABI-on-x86_64.patch | patch -p1
          cat ../patches/gcc/0002-Cygwin-add-dummy-pthread-tsaware-and-large-address-a.patch | patch -p1
          cat ../patches/gcc/0003-Cygwin-handle-dllimport-properly-in-medium-model-V2.patch | patch -p1
          cat ../patches/gcc/0004-Cygwin-MinGW-skip-test.patch | patch -p1
          cat ../patches/gcc/0005-Cygwin-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENA.patch | patch -p1
          cat ../patches/gcc/0007-Cygwin-__cxa-atexit.patch | patch -p1
          cat ../patches/gcc/0008-Cygwin-libgomp-soname.patch | patch -p1
          cat ../patches/gcc/0009-Cygwin-g-time.patch | patch -p1
          cat ../patches/gcc/0010-Cygwin-newlib-ftm.patch | patch -p1
          cat ../patches/gcc/0011-Cygwin-define-STD_UNIX.patch | patch -p1
          cat ../patches/gcc/0101-Cygwin-enable-libgccjit-not-just-for-MingW.patch | patch -p1
          cat ../patches/gcc/0102-Cygwin-testsuite-fixes-for-libgccjit.patch | patch -p1
          cat ../patches/gcc/0201-Cygwin-ada-shared-prefix.patch | patch -p2
          ./contrib/download_prerequisites
          popd

      - name: Build Binutils
        continue-on-error: true
        run: |
          mkdir build-binutils
          cd build-binutils
          ../binutils-${{ env.BINUTILS_V }}/configure --prefix="${{ github.workspace }}/gcc/cygwin" ${{ env.BINUTILS_O }}
          make
          make install
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'

      - name: Build gcc
        continue-on-error: true
        run: |
          mkdir build-gcc
          cd build-gcc
          ../gcc-${{ env.GCC_V }}/configure --prefix="${{ github.workspace }}/gcc/cygwin" ${{ env.GCC_O }}
          export glibcxx_cv_realpath=yes
          ___CFLAGS=`echo ${CFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CFLAGS=`echo ${___CFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CFLAGS=`echo ${___CFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          ___CXXFLAGS=`echo ${CXXFLAGS} | sed s/-Werror=format-security/-Wformat-security/g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed s/\(-Wp,\)\?-D_FORTIFY_SOURCE=[12]//g`
          ___CXXFLAGS=`echo ${___CXXFLAGS} | sed 's/[[:blank:]]\+/ /g'`
          CFLAGS="${___CFLAGS} -DWIN32_LEAN_AND_MEAN"
          CXXFLAGS="${___CXXFLAGS}"
          make ${MAKEOPTS} BOOT_CFLAGS="${CXXFLAGS}"
          make install
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'
          
      - name: Build cygwin
        continue-on-error: true
        run: |
          cd cygwin-${{ env.CYGWIN_V }}/winsup
          ./autogen.sh
          cd ../..
          mkdir build-cygwin
          cd build-cygwin
          ../cygwin-${{ env.CYGWIN_V }}/configure --prefix="${{ github.workspace }}/gcc/cygwin" ${{ env.CYGWIN_O }} \
          CFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector" \
          CXXFLAGS=" -Wp,-U_FORTIFY_SOURCE -fno-stack-protector -DCYGPORT_RELEASE_INFO='3.4.8-1'"
          make
          make install
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -eo pipefail '{0}'

      - name: Archive Install
        run: tar -zcvf cygwin-windows.tar.gz ${{ github.workspace }}/gcc/cygwin
        shell: powershell

  archive-builds:
    runs-on: ubuntu-latest
    needs: 
      - windows-build
      - linux-build

    steps:
      - name:  Archive
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: repo-archive
          path: cygwin-linux.tar.xz cygwin-windows.tar.gz
